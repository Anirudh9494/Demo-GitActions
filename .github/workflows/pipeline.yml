
name: build and deploy to sandbox

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{secrets.CA_CLIENT_ID}}
      CA_CLIENT_SECRET: ${{secrets.CA_CLIENT_SECRET}}
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
          restore-keys: |
            ${{runner.os}}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
           java-version: 11
           distribution: 'zulu'
      
      - name: Build with Maven
        run: mvn -B package -s .maven/settings.xml
      
      - name: Stamp artifact with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2
      
      - name: Upload artifact
        uses: actions/upload-artifact@main
        with: 
          name: artifacts
          path: target/*.jar
  # upload:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/cache@v3
  #     with: 
  #       path: ~/.m2/repository
  #       key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
  #       restore-keys: |
  #         ${{runner.os}}-maven-
  #   - uses: actions/download-artifact@master
  #     with:
  #       name: artifacts

  #   - name: Create Workspace Directory
  #     run: mkdir TEST

  #   - name: Create Relase Directory
  #     run: |
  #       cd TEST
  #       for file in *; do
  #       echo "Uploading $file..."
  #       curl -X POST \
  #       -H "Authorization: token $GITHUB_TOKEN" \
  #       -H "Content-Type: application/octet-stream" \
  #       --data-binary "@$file" \
  #       "$UPLOAD_URL?name=$file"
  #        done
      
  #   - name: Upload to GitHub Releases
  #     uses: actions/upload-release-asset@v1
  #     with:
  #       upload_url: https://github.com/Anirudh9494/GitAction-jarFiles
  #       asset_path: ./TEST
  #       asset_name: ci-cd-poc
  #       asset_content_type: application/java-archive
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

                    
  deploy:
        needs: build
        runs-on: ubuntu-latest 
        env:
          CA_CLIENT_ID: ${{secrets.CA_CLIENT_ID}}
          CA_CLIENT_SECRET: ${{secrets.CA_CLIENT_SECRET}}
        steps:
        - uses: actions/checkout@v3
        - uses: actions/cache@v3
          with:
            path: ~/.m2/repository
            key: ${{runner.os}}-maven-${{hashFiles('**/pom.xml')}}
            restore-keys: |
                ${{runner.os}}-maven-
        - uses: actions/download-artifact@master
          with:
           name: artifacts

        - name: Deploy to SANDBOX
          run: |
            artifactName=$(ls *.jar | head -1)
             mvn deploy -DmuleDeploy \ 
             -Dmule.artifact=$artifactName \
             -B .maven/settings.xml \ 
             -Danypoint.id="$CA_CLIENT_ID" \
             -Danypoint.secret="$CA_CLIENT_SECRET" \
             -DskipTests \
             -DskipDeploymentVerification="true"
